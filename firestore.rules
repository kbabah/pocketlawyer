rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Allow both authenticated and anonymous users to create feedback
    match /feedback/{feedbackId} {
      allow create: if 
        (isAuthenticated() && request.resource.data.userId == request.auth.uid) || 
        (!request.auth && request.resource.data.userId == 'anonymous');
      allow read, write, update, delete: if isOwner(resource.data.userId);
    }
    
    // Allow authenticated users to read and write their own chats
    match /chats/{chatId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, write, update, delete: if isOwner(resource.data.userId);
    }

    // Allow authenticated users to read and write their own documents
    match /documents/{documentId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, write, update, delete: if isOwner(resource.data.userId);
    }

    // Allow users to manage their profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write, update, delete: if isOwner(userId);
    }

    // Allow users to manage their notifications
    match /notifications/{notificationId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, write, update, delete: if isOwner(resource.data.userId);
    }

    // Allow users to manage their email campaigns
    match /email-campaigns/{campaignId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, write, update, delete: if isOwner(resource.data.userId);
    }
    
    // Allow public read access to published blog posts and admin write access
    match /blog-posts/{postId} {
      allow read: if 
        // Anyone can read published posts
        resource.data.published == true || 
        // Or if they're an admin
        isAdmin();
      
      // Only admins can create, update, or delete blog posts
      allow create, update, delete: if isAdmin();
    }
  }
}